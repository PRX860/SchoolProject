const TelegramBot = require("node-telegram-bot-api")
const puppeteer = require("puppeteer")
const AppConfig = require('./config')
const parser = require('./parser')


const conf = {view: {width: 390 , height: 844},
              launch : {headless: 'newupp'}}
const API_KEY_BOT = "6808347523:AAG3pUn2TWaq0nrIKjLk4sVNji9G5xOcLy0"
const bot = new TelegramBot(API_KEY_BOT, {
    polling: {
        interval: 300,
        autoStart: true
    }
})             






const commands = [
    {
        command: "items",
        description: "–ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"
    },
    {
        command: "help",
        description: "–ü–æ–º–æ—â—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"
    },
    /*{
        command: "find_by_platfrom",
        description: "–ü–æ–∏—Å–∫ –∫—É—Ä—Å–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"
    }*/
]
bot.setMyCommands(commands)
bot.on("polling_error", err => console.log(err.data.error.message));
bot.on("text", async msg => {
    try{
        if (msg.text == "/start"){
            bot.sendMessage(msg.chat.id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —é–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!\n–≠—Ç–æ EdSelectBot, –º–µ–Ω—è —Å–æ–∑–¥–∞–ª–æ —Å—É—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–∏–∑–æ—Å—â–µ–¥—à–µ–µ –æ—Ç –æ–±–µ–∑—å—è–Ω, –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n–í –æ–±—â–µ–º –∏ —Ü–µ–ª–æ–º, —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è, –µ—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ —è—Å–Ω–æ, –ø–∏—à–∏ /help  ')
        }
        else if(msg.text == "/help" ){
            await bot.sendMessage(msg.chat.id, '–î–ª—è –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /items, –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≥–æ—Ç–æ–≤–æ.')
        }
        else if(msg.text == "/items"){
            await bot.sendMessage(msg.chat.id, '<b>–®–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã</b>', {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ üëë', callback_data: 'math'}],
                        [{text: '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', callback_data: 'rus'}, {text: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data: 'lit'}],
                        [{text: '–§–∏–∑–∏–∫–∞', callback_data: 'phis'}, {text: '–•–∏–º–∏—è', callback_data: 'chem'}],
                        [{text: '–ò—Å—Ç–æ—Ä–∏—è', callback_data: 'his'}, {text: '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', callback_data: 'soc'}],
                        [{text: '–ë–∏–æ–ª–æ–≥–∏—è', callback_data: 'bio'}, {text: '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', callback_data: 'geo'}],
                        [{text: '–ê–Ω–≥–ª–∏–π—Å–∏–∫–π —è–∑—ã–∫', callback_data: 'en'}],
                        [{text: "–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data: 'close'}]
                    ]
                },
                parse_mode: "HTML",
                reply_to_message_id: msg.message_id
            })
        }else{
            const quote = await parser.getRandomQuote()
            await bot.sendMessage(msg.chat.id, `<b>–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—è –Ω–µ –Ω–∞—É—á–∏–ª–∏, –Ω–æ —è —É–º–µ—é –∫–∏–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —Ü–∏—Ç–∞–∫–∏. –í–æ—Ç –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö: </b><i>"${quote}"</i>`, {parse_mode: 'HTML'})
            console.log(msg.chat.id)
        }
    }catch(error){
        console.log(error)
    }

})


bot.on("callback_query", async ctx => {
    try {
        const result = async(request)=>{
            
            bot.sendMessage(ctx.message.chat.id, "–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ :)")
            const result = await parser.getAllCoursesInfo(request)
            if (result.length >= 5){
                for (let i = 0; i<5 ;i++){let course = result[i];await bot.sendMessage(ctx.message.chat.id, `${course.title} \n ${course.url}`)}
            }else{
                for (let i = 0; i<result.length ;i++){let course = result[i];await bot.sendMessage(ctx.message.chat.id, `${course.title} \n ${course.url}`)}
            }
            await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
            await bot.sendMessage(ctx.message.chat.id,"–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –µ—â—ë –∫—É—Ä—Å—ã —Ç–æ, –∂–º–∏ /items")
            
        }
        switch(ctx.data){
            case "close":
                await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
                await bot.deleteMessage(ctx.message.reply_to_message.chat.id, ctx.message.reply_to_message.message_id);
                break;

            case "math":
                await result('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
                break;
            case "rus":
                await result('—Ä—É—Å—Å–∫–∏–π')
                break
            case "lit":
                await result('–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
                break
            case "phis":
                await result('—Ñ–∏–∑–∏–∫–∞')
                break
            case "chem":
                await result('—Ö–∏–º–∏—è')
                break
            case "his":
                await result('–∏—Å—Ç–æ—Ä–∏—è')
                break
            case "soc":
                await result('–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –ø—Ä–∞–≤–æ')
                break
            case "bio":
                await result('–±–∏–æ–ª–æ–≥–∏—è')
                break
            case "geo":
                await result('–≥–µ–æ–≥—Ä–∞—Ñ–∏—è')
                break
            case 'en':
                await result('–∞–Ω–≥–ª–∏–π—Å–∫–∏–π')
                break
        }
    }catch(err){
        console.log(err)
    }
})